=============================================
Лабораторна робота №4: Workqueue і таймери в ядрі Linux  
=============================================

Завдання
-------
- Реализовать два потока, запустить таймер и ворк в shared workqueue

- При срабатывании таймера проверить текущее значение jiffies, если оно кратно 11 – остановить поток 1, иначе – таймер должен перезапустить себя через 17 jiffies

- Внутри ворка проверить текущее значение jiffies, если оно кратно 11 – остановить поток 2, иначе – ворк должен уснуть на 17 jiffies и перезапустить себя

- Добавить два связных списка, в которые аллоцировать и добавлять элементы со значениями jiffies, которые не привели к завершению потоков 1 и 2. Получается связь таймер - список 1 - поток 1. И ворк - список 2 - поток 2

- При выходе из потоков распечатывать списки

- Внутри ворка и таймера использовать правильные аллокации для новых элементов списка, правильную синхронизацию работы со списком

- Предусмотреть, что пользователь может выгрузить модуль до отработки всех таймеров и ворков

Теоретичний матеріал
-------------------

Workqueue - набагато складніші за tasklet'и, які ми розглядали у другій лаб. роботі, але вони мають дещо спільне, а саме те, що і workqueue і tasklet'и, потрібні для обробки відкладених переривань та знаходяться верхній частині ``soft_irq``.
Але workqueue виконується в контексті kernel-процесу, вони не зобов'язані бути атомарними, та можуть ``спати``.

Timer - використовуються для запланування виконання методу, у потрібний для цього час. Різниця між timer, та workqueue & tasklet, полягає в тому, що саме ми задаємо в який момент часу потрібно визвати функцію. 
Переривання timer'а знаходяться у нижній частині ``soft_irq``, тому потрібно бути обережним з використанням функцій(в обробнику), які можуть спати, бо це може призвести до неочікуваних результатів.

Хід роботи
-------
Було написано модуль ядра, який ініціалізує timer & workqueue та два потоки і задає початкові значення часу. При генеруванні переривання, викликається обробник, ``timer_handler`` або ``work_handler``
В середині ``work'у`` та в середині ``timer'у`` перевіряється значення jiffies, якщо jiffies % 11 == 0, то поток зупиняється, інакше ``work`` спить та через 17 jiffies перезапускається, а ``timer`` перезапускається через 17 jiffies, також значення jiffies заноситься у список.
Так як ``kthread_stop`` може спати, його не бажано використовувати, для того щоб зупинити потік у контексті переривання. Тому було проаналізовано роботи одногрупників, та коментарі викладача до них, та використано ``completion``.

Запуск на х86
--------
Результат:


 .. code-block:: C
 
 
    [ 1862.503874] delayed work started!
    [ 1862.503876] timer started!
    [ 1862.606866] WORK HANDLER!
    [ 1862.606868] jiffies added to work list : 4295357909
    [ 1862.626850] TIMER HANDLER!
    [ 1862.626852] jiffies added to timer list : 4295357914
    [ 1862.678854] WORK HANDLER!
    [ 1862.678856] jiffies added to work list : 4295357927
    [ 1862.698850] TIMER HANDLER!
    [ 1862.698853] jiffies added to timer list : 4295357932
    [ 1862.750857] WORK HANDLER!
    [ 1862.750859] jiffies added to work list : 4295357945
    [ 1862.770849] TIMER HANDLER!
    [ 1862.770851] jiffies added to timer list : 4295357950
    [ 1862.822854] WORK HANDLER!
    [ 1862.822856] jiffies added to work list : 4295357963
    [ 1862.842851] TIMER HANDLER!
    [ 1862.842859] Trying to stop timer
    [ 1862.842861] Timer stopped 
    [ 1862.842862] Thread stopped!
    [ 1862.842863] List data :
    [ 1862.842865]  jiffies: 4295357950
    [ 1862.842865]  jiffies: 4295357932
    [ 1862.842866]  jiffies: 4295357914
    [ 1862.894869] WORK HANDLER!
    [ 1862.894870] jiffies added to work list : 4295357981
    [ 1862.966863] WORK HANDLER!
    [ 1862.966865] jiffies added to work list : 4295357999
    [ 1863.038855] WORK HANDLER!
    [ 1863.038858] jiffies added to work list : 4295358017
    [ 1863.110865] WORK HANDLER!
    [ 1863.110868] jiffies added to work list : 4295358035
    [ 1863.182864] WORK HANDLER!
    [ 1863.182866] jiffies added to work list : 4295358053
    [ 1863.254870] WORK HANDLER!
    [ 1863.254873] jiffies added to work list : 4295358071
    [ 1863.326867] WORK HANDLER!
    [ 1863.326868] Trying to stop work
    [ 1863.326869] Work stopped 
    [ 1863.326870] Thread stopped!
    [ 1863.326870] List data :
    [ 1863.326872]  jiffies: 4295358071
    [ 1863.326873]  jiffies: 4295358053
    [ 1863.326874]  jiffies: 4295358035
    [ 1863.326875]  jiffies: 4295358017
    [ 1863.326876]  jiffies: 4295357999
    [ 1863.326876]  jiffies: 4295357981
    [ 1863.326877]  jiffies: 4295357963
    [ 1863.326878]  jiffies: 4295357945
    [ 1863.326879]  jiffies: 4295357927
    [ 1863.326880]  jiffies: 4295357909
    [ 1875.953440] Successfully deleted all nodes!
    [ 1875.953444] Successfully deleted all nodes!


Висновки
------

Було написано модуль ядра, в якому застосовано механізм багатозадачності ``workqueue`` та механізм відносно точного, відкладеного оброблення методу ``timer`` .
